import telebot
import json
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = ('8363133718:AAGcdIhpeulIvbixgB3OQmYRpEvTYgXLYyg')
bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.json'
POLL_FILE = 'poll_data.json'

# –£—á–∞—Å—Ç–Ω–∏–∫–∏
PARTICIPANTS = ["–ì–∞–º–∞–º", "–ö–æ–¥–µ–Ω", "–ê–ª–ª–≤–µ–¥", "–û–ª–≤–∏–Ω"]


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_bindings():
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return {int(k): v for k, v in data.items()}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {USERS_FILE}:", e)
        return {}


def save_user_bindings(bindings):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump({
            str(k): v
            for k, v in bindings.items()
        },
                  f,
                  ensure_ascii=False,
                  indent=2)


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞ ---
def load_poll_data():
    if not os.path.exists(POLL_FILE):
        return {
            "answers": {
                name: None
                for name in PARTICIPANTS
            },
            "leader": None,
            "judge": None,
            "poll_message_id": None,
            "poll_chat_id": None,
            "editable": []
        }
    try:
        with open(POLL_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if "answers" not in data:
            data["answers"] = {}
        for name in PARTICIPANTS:
            if name not in data["answers"]:
                data["answers"][name] = None
        if "editable" not in data:
            data["editable"] = []
        return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {POLL_FILE}:", e)
        return {
            "answers": {
                name: None
                for name in PARTICIPANTS
            },
            "leader": None,
            "judge": None,
            "poll_message_id": None,
            "poll_chat_id": None,
            "editable": []
        }


def save_poll_data():
    with open(POLL_FILE, 'w', encoding='utf-8') as f:
        json.dump(poll_data, f, ensure_ascii=False, indent=2)


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_to_name = load_user_bindings()
poll_data = load_poll_data()  # –≠—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è!

# === –ö–û–ú–ê–ù–î–´ ===

@bot.message_handler(commands=['vote'])
def start_poll(message):
    global poll_data

    # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ, –µ—Å–ª–∏ –º–æ–∂–µ–º
    if poll_data["poll_chat_id"] and poll_data["poll_message_id"]:
        try:
            bot.unpin_chat_message(poll_data["poll_chat_id"], poll_data["poll_message_id"])
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ):", e)
        # –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º
    poll_data = {
        "answers": {name: None for name in PARTICIPANTS},
        "leader": None,
        "judge": None,
        "poll_message_id": None,
        "poll_chat_id": None,
        "editable": []
    }
    save_poll_data()

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    update_poll_form(message.chat.id)

    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ ‚Äî –∑–∞–∫—Ä–µ–ø–ª—è–µ–º
    if poll_data["poll_message_id"] and poll_data["poll_chat_id"]:
        try:
            bot.pin_chat_message(poll_data["poll_chat_id"], poll_data["poll_message_id"], disable_notification=True)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
            print("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è:", e)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É –æ–ø—Ä–æ—Å–∞.")
        
@bot.message_handler(commands=['ref'])
def refresh_poll(message):
    if not poll_data["poll_message_id"]:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    if message.chat.id != poll_data["poll_chat_id"]:
        return

    update_poll_form()
    bot.reply_to(message, "üîÑ –§–æ—Ä–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

@bot.message_handler(commands=['meis'])
def bind_me_to_name(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π: `/meis –ò–º—è`", parse_mode="Markdown")
        return

    name = args[1].strip()
    user_id = message.from_user.id

    if name not in PARTICIPANTS:
        bot.reply_to(
            message,
            f"‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(PARTICIPANTS)}")
        return

    if user_id in user_to_name:
        old_name = user_to_name[user_id]
        bot.reply_to(message, f"üîπ –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫: {old_name}")
        return

    if name in user_to_name.values():
        bot.reply_to(message, f"‚ùå –ò–º—è '{name}' —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        return

    user_to_name[user_id] = name
    save_user_bindings(user_to_name)
    bot.reply_to(message,
                 f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫: *{name}*",
                 parse_mode="Markdown")


@bot.message_handler(commands=['lead'])
def set_leader(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message,
                     "–ò—Å–ø–æ–ª—å–∑—É–π: `/lead –ò–º—è` –∏–ª–∏ `/lead —Å–Ω—è—Ç—å`",
                     parse_mode="Markdown")
        return

    name = args[1].strip()
    if name == "—Å–Ω—è—Ç—å":
        poll_data["leader"] = None
        bot.reply_to(message, "‚úÖ –õ–∏–¥–µ—Ä —Å–Ω—è—Ç.")
    elif name in PARTICIPANTS:
        poll_data["leader"] = name
        bot.reply_to(message, f"‚úä {name} –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏–¥–µ—Ä–æ–º.")
    else:
        bot.reply_to(message, f"‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    save_poll_data()
    update_poll_form()


@bot.message_handler(commands=['jud'])
def set_judge(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message,
                     "–ò—Å–ø–æ–ª—å–∑—É–π: `/jud –ò–º—è` –∏–ª–∏ `/jud —Å–Ω—è—Ç—å`",
                     parse_mode="Markdown")
        return

    name = args[1].strip()
    if name == "—Å–Ω—è—Ç—å":
        poll_data["judge"] = None
        bot.reply_to(message, "‚úÖ –°—É–¥—å—è —Å–Ω—è—Ç.")
    elif name in PARTICIPANTS:
        poll_data["judge"] = name
        bot.reply_to(message, f"‚öñÔ∏è {name} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—É–¥—å—ë–π.")
    else:
        bot.reply_to(message, f"‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    save_poll_data()
    update_poll_form()


@bot.message_handler(commands=['dis'])
def reset_answer(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        return
    name = args[1].strip()
    if name not in PARTICIPANTS:
        return
    if name not in poll_data["editable"]:
        poll_data["editable"].append(name)
        save_poll_data()
        update_poll_form()


# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–û–†–ú–´ ===
def update_poll_form(chat_id=None):
    global poll_data

    text = "üìã **–§–æ—Ä–º–∞ –æ–ø—Ä–æ—Å–∞**\n\n"
    for name in PARTICIPANTS:
        answer = poll_data["answers"][name]
        leader_emoji = "‚úä " if poll_data["leader"] == name else ""
        judge_emoji = "‚öñÔ∏è " if poll_data["judge"] == name else ""
        status = "‚úÖ" if answer is not None and name not in poll_data["editable"] else "üü°"
        answer_text = f"`{answer}`" if answer is not None else "–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        text += f"{leader_emoji}{judge_emoji}{status} {name}: {answer_text}\n"

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–í–Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç", callback_data="submit_answer"))

    if chat_id:
        try:
            sent = bot.send_message(chat_id, text, reply_markup=markup, parse_mode="Markdown")
            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            poll_data["poll_message_id"] = sent.message_id
            poll_data["poll_chat_id"] = chat_id
            save_poll_data()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:", e)
    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ID –µ—Å—Ç—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if poll_data["poll_message_id"] and poll_data["poll_chat_id"]:
            try:
                bot.edit_message_text(
                    chat_id=poll_data["poll_chat_id"],
                    message_id=poll_data["poll_message_id"],
                    text=text,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 400 and 'message is not modified' in e.description:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                elif e.error_code == 400 and 'message to edit not found' in e.description:
                    print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–æ.")
                else:
                    print("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", e)
            except Exception as e:
                print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", e)


# === –ö–ù–û–ü–ö–ò –û–¢–í–ï–¢–ê ===
@bot.callback_query_handler(func=lambda call: call.data == "submit_answer")
def submit_answer(call):
    user_id = call.from_user.id

    if user_id not in user_to_name:
        bot.answer_callback_query(call.id,
                                  "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /meis –ò–º—è")
        return

    name = user_to_name[user_id]

    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("–ü–∞—Å - –≤–ª–∞—Å—Ç—å",
                                           callback_data="ans:pass_vlast"),
        telebot.types.InlineKeyboardButton("–ü–∞—Å - —Å—É–¥—å—è",
                                           callback_data="ans:pass_sud"))
    markup.row(
        telebot.types.InlineKeyboardButton("–î–∞ - X", callback_data="ans:da_x"),
        telebot.types.InlineKeyboardButton("–ù–µ—Ç - X",
                                           callback_data="ans:no_x"))

    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"‚úä {name}, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("ans:"))
def handle_answer_choice(call):
    user_id = call.from_user.id
    action = call.data.split(":")[1]

    if user_id not in user_to_name:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã.")
        return

    name = user_to_name[user_id]

    if action == "pass_vlast":
        final_answer = "–ü–∞—Å - –≤–ª–∞—Å—Ç—å"
        save_and_update(call.message.chat.id, call.message.message_id, name,
                        final_answer)
        bot.answer_callback_query(call.id, f"‚úÖ {name}: –ü–∞—Å - –≤–ª–∞—Å—Ç—å")

    elif action == "pass_sud":
        final_answer = "–ü–∞—Å - —Å—É–¥—å—è"
        save_and_update(call.message.chat.id, call.message.message_id, name,
                        final_answer)
        bot.answer_callback_query(call.id, f"‚úÖ {name}: –ü–∞—Å - —Å—É–¥—å—è")

    elif action == "da_x":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="üî¢ –°–∫–æ–ª—å–∫–æ –≤–ª–∞—Å—Ç–∏ –≤–ª–æ–∂–∏—Ç—å –≤ –î–∞?:",
                              reply_markup=None)
        bot.register_next_step_handler(call.message, process_number, name,
                                       "–î–∞ - {}")

    elif action == "no_x":
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="üî¢ –°–∫–æ–ª—å–∫–æ –≤–ª–∞—Å—Ç–∏ –≤–ª–æ–∂–∏—Ç—å –≤ –ù–µ—Ç?",
                              reply_markup=None)
        bot.register_next_step_handler(call.message, process_number, name,
                                       "–ù–µ—Ç - {}")
        
@bot.message_handler(commands=['revote'])
def revive_poll(message):
    global poll_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not poll_data["poll_chat_id"]:
        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        poll_data["poll_chat_id"] = message.chat.id

    chat_id = poll_data["poll_chat_id"]

    # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if poll_data["poll_message_id"]:
        try:
            bot.unpin_chat_message(chat_id, poll_data["poll_message_id"])
        except:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π ID ‚Äî —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    old_message_id = poll_data["poll_message_id"]
    poll_data["poll_message_id"] = None
    save_poll_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É (–æ–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç poll_message_id)
    update_poll_form(chat_id)

    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if poll_data["poll_message_id"]:
        try:
            bot.pin_chat_message(chat_id, poll_data["poll_message_id"], disable_notification=True)
            bot.send_message(chat_id, "‚úÖ –§–æ—Ä–º–∞ –æ–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞.")
        except Exception as e:
            bot.send_message(chat_id, "‚ö†Ô∏è –§–æ—Ä–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
            print("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ø—Ä–∏ /revote:", e)
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º—É.")

def process_number(message, name, template):
    try:
        num = int(message.text.strip())
        if num < 1 or num > 100:
            bot.send_message(message.chat.id,
                             "‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
            bot.register_next_step_handler(message, process_number, name,
                                           template)
            return
        final_answer = template.format(num)
        save_and_update(message.chat.id, None, name, final_answer)
        bot.send_message(message.chat.id,
                         f"‚úÖ {name}, –≤–∞—à –æ—Ç–≤–µ—Ç: *{final_answer}*",
                         parse_mode="Markdown")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, process_number, name, template)


def save_and_update(chat_id, message_id, name, answer):
    poll_data["answers"][name] = answer
    if name in poll_data["editable"]:
        poll_data["editable"].remove(name)
    save_poll_data()
    update_poll_form()


# === –ó–ê–ü–£–°–ö ===
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
print("–§—É–Ω–∫—Ü–∏—è keep_alive —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", 'keep_alive' in globals())
print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", [k for k in globals().keys() if k[0].islower()][:10])
print("‚úÖ –î–æ—Å—Ç–∏–≥–ª–∏ –º–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ keep_alive()")


# === –í–ï–ë-–°–ï–†–í–ï–† ===
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# === –ó–ê–ü–£–°–ö ===
print("‚úÖ –î–æ—Å—Ç–∏–≥–ª–∏ –º–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ keep_alive()")  # ‚Üê –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
keep_alive()
print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7...")
bot.polling(none_stop=True)
